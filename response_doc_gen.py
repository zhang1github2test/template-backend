import os
import re

GO_SRC_DIR = "./internal/model"   # 修改为你的 struct 路径
OUTPUT_FILE = "./internal/dto/response_doc_gen.go"


def parse_go_structs(file_path):
    """解析 Go 源文件里的 struct 定义"""
    with open(file_path, "r", encoding="utf-8") as f:
        content = f.read()
    return re.findall(r"type\s+(\w+)\s+struct\s*{([^}]*)}", content, re.S)


def generate_response_docs(struct_name):
    """生成单对象和分页对象的 ResponseDoc 代码"""
    response_doc_name = f"{struct_name}ResponseDoc"
    page_data_name = f"{struct_name}PageData"
    page_response_doc_name = f"{struct_name}PageResponseDoc"

    single_doc = f"""
// {response_doc_name} 用于 Swagger 文档展示 (单对象返回)
type {response_doc_name} struct {{
    Code int    `json:"code"`
    Msg  string `json:"msg"`
    Success bool `json:"success"`
    Data model.{struct_name} `json:"data"`
}}
"""

    page_doc = f"""
// {page_data_name} 用于 Swagger 文档展示 (分页数据)
type {page_data_name} struct {{
    List     []model.{struct_name} `json:"list"`
    Total    int64           `json:"total"`
    Page     int             `json:"page"`
    PageSize int             `json:"pageSize"`
}}

// {page_response_doc_name} 用于 Swagger 文档展示 (分页返回)
type {page_response_doc_name} struct {{
    Code int    `json:"code"`
    Msg  string `json:"msg"`
    Success bool `json:"success"`
    Data {page_data_name} `json:"data"`
}}
"""
    return single_doc + "\n" + page_doc


def main():
    structs = []
    for root, _, files in os.walk(GO_SRC_DIR):
        for file in files:
            if file.endswith(".go"):
                file_path = os.path.join(root, file)
                structs.extend(parse_go_structs(file_path))

    if not structs:
        print("❌ 没有找到任何 struct")
        return

    response_docs = []
    for struct_name, _ in structs:
        response_docs.append(generate_response_docs(struct_name))

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("// Code generated by response_doc_gen.py. DO NOT EDIT.\n")
        f.write("package dto\n\n")
        f.write("import \"template-backend/internal/model\"\n\n")
        for doc in response_docs:
            f.write(doc + "\n")

    print(f"✅ 已生成 {len(structs)} 个 ResponseDoc (含分页版) 到 {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
